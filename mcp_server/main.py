# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:47:31+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Query, UploadFile
from starlette.requests import Request

from models import (
    BehaviourOutput,
    CheckDetailsOutput,
    CheckOutput,
    ChecksOutput,
    ContinuousCheck,
    Country5,
    Error,
    GetContiuousCheckHistoryOutput,
    Hook,
    HookOutput,
    ListContinuousChecksOutput,
    ReportOutput,
    ReportsOutput,
    ScoreConfigOutput,
    ScoreConfigsOutput,
    TruoraPriority,
    V1BehaviorPostResponse,
    V1ChecksHealthGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'api@truora.com',
        'name': 'Truora API Team',
        'url': 'https://www.truora.com',
    },
    description='**NOTE:** This is a preview of the API and it is not considered stable since refinements are still being made.\n\n# Introduction\n\nWelcome to the  **Truora Check** [**RESTful API**](https://en.wikipedia.org/wiki/Representational_state_transfer) reference. You may also want to check out our [**Validations API docs**](https://docs.validations.truora.com/) or our [**Signals API docs**](https://docs.signals.truora.com/).\n\nTruora Check API allows performing full background checks on people, vehicles and companies. There are three main types of background checks:\n\n- **Personal background check**: Verifies national IDs in multiple databases of public and legal entities in the LATAM region. For every national ID, returns information on: personal identity, criminal records, international background check, and professional background.\n\n- **Vehicle background check**: Verifies the vehicle documents and the owner identity in multiple databases of public and legal entities in the LATAM region. For every vehicle and owner type, returns information on: personal identity, driving records, criminal records, and vehicle information.  \n\n- **Company background check**: Verifies the tax ID or a company name in multiple databases of public and legal entities in the LATAM region. For every company, returns the associated: business status, legal and criminal records, and media reports.\n\n# API Key V1 is live!\n\nAPI key version 1 is now live. Users with version 0 API keys are not immediately required to upgrade to V1 but should plan to do so at their earliest convenience. The changes for integration with API keys v1 are as follows:\n\n- The field ``user_authorized`` is now required to perform person checks. This field indicates the API user has authorization to perform the check in compliance with data protection law.\n- The field ``homonym_scores`` is no longer included in our person check response as its results are already included in the body of the check and keeping them duplicated is generating unnecessary confusion.\n\n\n# API composition\n\n## Endpoints\n\n- **Check endpoints**: Provide an easy way to create and search for a background check. They also allow inserting groups of checks into reports. Each check contains scores, datasets and databases.\n \n```plain\nhttps://api.truora.com/v1/checks\n```\n\n- **Report endpoints**: Support batch uploads and grouping multiple checks together. Excel and .csv files are supported for batch uploads.\n \n```plain\nhttps://api.truora.com/v1/reports\n```\n\n- **Configuration endpoints**: Allows personalizing data sets and scores for customized background checks.\n\n```plain\nhttps://api.truora.com/v1/config\n```\n\n- **Continuous check endpoints**: Allows creating recurring checks and get notified whenever a change in the check score occurs.\n\n```plain\nhttps://api.truora.com/v1/continuous_checks\n```\n\n- **Behavior endpoints**: Allows sharing anonymous feedback about a person behavior when interacting with the company.\n\n```plain\nhttps://api.truora.com/v1/behaviour\n```\n\n- **Hooks endpoints**: Allows sending notifications via requests to your service or another third-party service whenever certain events occur.\n\n```plain\nhttps://api.truora.com/v1/hooks\n```\n\n## Datasets\n\nCategories that group the resulting information for background checks from databases are called datasets. Datasets are divided in:\n\n- **Personal identity**: Corroborates the existence and validates personal identity documents. \n\n- **Criminal record**: Checks for crimes according to each country penal code or criminal code. Keep in mind that data aged less than 10 years is usually more consistent.\n\n- **Legal background**: Checks for lawsuits filed. Keep in mind that data aged less than 10 years is usually more consistent.\n\n- **International background**: Checks international lists for crimes related to identity theft, money laundering, terrorist financing, and high crimes.\n\n- **Professional background**: Checks professional regulatory entities for relevant information.\n\n- **Affiliations and insurances**: Checks the history and status of social security affiliations.\n\n- **Alert in media**: Checks major media agencies for relevant news related to violent actions.    \n\n- **Vehicle information**: Checks for the physical characteristics of the vehicle, technical status, insurance history, and other relevant information.\n\n- **Traffic fines**: Checks for outstanding traffic fines.\n\n- **Driving licenses**: Shows information relevant to the driver. Such as license status and driver certificates.\n\n- **Business background**: Checks for business status, legal and criminal history, and other relevant information.\n\n- **Taxes and Finances**: Checks for the information related to personal finances, liabilities, and taxes.\n\n## Requests Format\n\nThe POST requests receive a body that must be encoded in `www-x-form-urlencoded`, for instance:\n\n```plain\ntype=person&national_id=123456&country=CO\n```\n\nThe responses are always encoded in `JSON` format.\n\n## Errors\n\nWhenever there is an error, a JSON with the following format is returned:\n\n```json\n{\n    "code": <Truora error code>,\n    "http_code": <The HTTP status of the response>,\n    "message": <The error message>\n}\n```\n\nfor instance:\n\n```json\n{\n    "code": 10404,\n    "http_code": 404,\n    "message": "The Check was not found"\n}\n```\n\n## SDKs\n\nIf your favorite language was not on the next list, You can use our [OpenAPI 3 spec](https://docs.truora.com/openapi.json) to generate it using the [Open API Generator](https://openapi-generator.tech/docs/installation).\n\nTo download the SDK click on the desired programming language:\n\n- [C# .Net Core](https://truora-sdk.s3.amazonaws.com/checks/checks_csharp-netcore_latest.zip)\n\n- [Elixir](https://truora-sdk.s3.amazonaws.com/checks/checks_elixir_latest.zip)\n\n- [Go](https://truora-sdk.s3.amazonaws.com/checks/checks_go_latest.zip)\n\n- [Java](https://truora-sdk.s3.amazonaws.com/checks/checks_java_latest.zip)\n\n- [JavaScript](https://truora-sdk.s3.amazonaws.com/checks/checks_javascript_latest.zip)\n\n- [Objc](https://truora-sdk.s3.amazonaws.com/checks/checks_objc_latest.zip)\n\n- [Php](https://truora-sdk.s3.amazonaws.com/checks/checks_php_latest.zip)\n\n- [Python](https://truora-sdk.s3.amazonaws.com/checks/checks_python_latest.zip)\n\n- [Ruby](https://truora-sdk.s3.amazonaws.com/checks/checks_ruby_latest.zip)\n\nYou can see the full list of supported platforms here:\n\nhttps://openapi-generator.tech/docs/generators\n\n\n',
    license={'name': 'MIT License', 'url': 'https://opensource.org/licenses/MIT'},
    termsOfService='http://swagger.io/terms/',
    title='Checks API',
    version='1.0.0',
    servers=[
        {'description': 'The main Truora API domain', 'url': 'https://api.truora.com'}
    ],
)


@app.post(
    '/v1/behavior',
    description=""" Creates a behavior item to report employee conducts that do not or might not be included in their background check. This report includes both possitive and negative behaviors and sorts them by severity.

### Reasons to report a person

<table>
  <tr>
    <td style="width: 100px"><center><b>Very High</b><br>(Score: 1)</td>
    <td>Rape, Drug Dealing, Sexual Harassment</td>
  </tr>
  <tr>
    <td><center><b>High</b><br>(Score: 0.8)</td>
    <td>Theft, Fights, Aggressive Behaviour, Identity Fraud, Drunk, Drug Possession</td>
  </tr>
  <tr>
    <td><center><b>Medium</b><br>(Score: 0.6)</td>
    <td>Absences</td>
  </tr>
  <tr>
    <td><center><b>Low</b><br>(Score: 0.4)</td>
    <td>Tardiness, Confidentiality Breach</td>
  </tr>
  <tr>
    <td><center><b>None</b><br>(Score: 0)</td>
    <td>Good Reputation</td>
  </tr>
  <tr>
    <td><center><b>Unknown</b></td>
    <td>No information</td>
  </tr>
</table>

**NOTE:** If the reason of your report is not here, please contact Truora support team.
 """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def report_behavior(request: Request):
    """
    Report Behavior
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/checks',
    description=""" Lists the existing checks in the account or in a specified report. """,
    tags=['report_management', 'background_check_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def list_checks(start_key: Optional[str] = None, report_id: Optional[str] = None):
    """
    List Checks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/checks',
    description=""" Creates a background check and queues it to start collecting information. The full details of background checks can be retrieved with their respective Check IDs using getCheck endpoint. Keep in mind that, depending on the check type, input document, and country of a search, certain inputs are required. You should always provide as many inputs as possible in order to get the highest accuracy.

If your check type is not referenced in the following table, please reach out to find out the fields that apply for you.

| Country | Person-National | PersonForeigner | Company | Vehicle-National | Vehicle-Foreigner |
|:-------:|:---------------:|:---------------:|:-------:|:----------------:|:-----------------:|
| Chile<br>CL | national_id*<br>date_of_birth<br>phone_number | foreign_id*<br>date_of_birth*<br>phone_number<br>first_name*<br>last_name*<br>native_country* | N/A | national_id*<br>license_plate*<br>payment_date (Santiago only)<br>driver_license (Santiago only) | foreign_id*<br>first_name*<br>last_name*<br>date_of_birth*<br>native_country*<br>license_plate*<br>payment_date (Santiago only)<br>driver_license (Santiago only) |
| Colombia<br>CO | national_id*<br>date_of_birth<br>issue_date<br>phone_number | foreign_id* or PEP*<br>date_of_birth<br>phone_number<br>issue_date* | tax_id*<br>national_id | national_id*<br>date_of_birth<br>phone_number<br>license_plate*<br>owner_document_type<br>owner_document_id | foreign_id*<br>date_of_birth<br>phone_number<br>license_plate*<br>issue_date* |
| Mexico<br>MX | national_id*<br>phone_number | foreign_id* | tax_id* | license_plate*<br>national_id<br>vehicle_id<br>driver_license(Estado de Mexico only) | N/A |
| Brazil<br>BR | national_id*<br>date_of_birth*<br>region*<br>phone_number | N/A | tax_id* | license_plate* | N/A |
| Costa Rica<br>CR | national_id*<br>phone_number | foreign_id* | N/A | license_plate* | N/A |
| Ecuador<br>EC | national_id*<br>phone_number | foreign_id* | tax_id* | license_plate* | N/A |
| Peru<br>PE | national_id*<br>date_of_birth<br>phone_number | foreign_id*<br>ptp<br>date_of_birth*<br>phone_number | N/A | national_id*<br>date_of_birth<br>license_plate* | foreign_id*<br>ptp<br>date_of_birth*<br>license_plate* |
| Argentina<br>AR | national_id* | N/A | N/A | national_id* | N/A |
| International<br>ALL | name* | name* | company_name* | N/A | N/A |

(*) Required field """,
    tags=['background_check_management', 'report_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def create_check(
    truora__priority: Optional[TruoraPriority] = Header(None, alias='Truora-Priority'),
    request: Request = ...,
):
    """
    Create a background check
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/checks/health',
    description=""" Get the status of a database """,
    tags=['health_metrics_dashboard'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def get_health_dashboard(
    country: Optional[str] = None,
    unix_timestamp_seconds: Optional[str] = Query(None, alias='unixTimestampSeconds'),
    unixtimezone_offset_seconds: Optional[str] = Query(
        None, alias='unixtimezoneOffsetSeconds'
    ),
):
    """
    Get Health Dashboard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/checks/{check_id}',
    description=""" Returns the results of the check that matches the ID provided, complete with a set of scores explained below.

### Scores:


- **Global Score**: Average risk associated with a person, company or vehicle, according to  the background check results. The global score considers results that are validated with the  ID number provided. The score ranges from 0 to 1, where 0 represents high risk and 1 low risk.


- **ID Score**: Average risk associated with a person according to the background check  results. The ID score considers the results that are validated with a person identity  document. The score ranges from 0 to 1, where 0 represents high risk and 1 low risk. 


- **Homonym Score**: Average risk associated with a person according to the background check  results. The homonym score considers results that are validated against the name of a person and could not be validated with their ID number. These results might have homonyms associated with them. The score ranges from 0 to 1, where 0 represents high risk and 1 low risk.


In order to calculate these scores, a weighted average is considered with different weights allocated to each dataset. Scores can be customized using the config endpoints by assigning a weight to each dataset according to its relevance.

Keep in mind that results from the API vary depending on the country, check type and the inputs entered on check creation. """,
    tags=['background_check_management', 'report_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def get_check(check_id: Union[str, str, str, str]):
    """
    Get Background Check
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/checks/{check_id}/details',
    description=""" Lists all details associated with a Check. It can be paginated. """,
    tags=['background_check_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def list_check_details(
    start_key: Optional[str] = None, lang: Optional[str] = None, check_id: str = ...
):
    """
    List Check Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/checks/{check_id}/pdf',
    description=""" Downloads the PDF in the specified language, Spanish by default. """,
    tags=['pdf_document_operations', 'background_check_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def get_p_d_f(lang: Optional[str] = None, check_id: str = ...):
    """
    Get PDF
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/checks/{check_id}/pdf',
    description=""" Creates a PDF containing the background check results. """,
    tags=['pdf_document_operations', 'background_check_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def create_p_d_f(check_id: str):
    """
    Create PDF
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/config',
    description=""" Allows deleting a custom type. Person, vehicle, and company types cannot be deleted """,
    tags=['custom_type_configuration'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def delete_custom_type(type: str, country: Optional[Country5] = None):
    """
    Delete Custom Type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/config',
    description=""" Lists the custom score configurations of the associated account. """,
    tags=['score_settings_configuration'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def list_score_configs(start_key: Optional[str] = None):
    """
    List Score Configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/config',
    description=""" Create a custom score configuration selecting the weight for each background check dataset and the country where it applies. Weights are numbers between 0 and 1 that represent how impactful the dataset is for the score. Keep in mind that the sum of all weights must equal 1. """,
    tags=['score_settings_configuration'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def create_score_config(request: Request):
    """
    Create Score Configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/config',
    description=""" Allows updating a custom type. Person, vehicle, and company types are not modifiable """,
    tags=['custom_type_configuration'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def update_custom_type(request: Request):
    """
    Update Custom Type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/continuous-checks',
    description=""" Lists all continuous checks """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def list_continuous_checks():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/continuous-checks',
    description=""" Creates a continuous check that will run background checks recurrently according to the frequency provided. """,
    tags=[
        'report_management',
        'background_check_management',
        'pdf_document_operations',
        'hook_subscription_management',
        'score_settings_configuration',
        'custom_type_configuration',
        'health_metrics_dashboard',
    ],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def create_continuous_check(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/continuous-checks/{continuous_check_id}',
    description=""" Lists history associated with a Check. It can be paginated """,
    tags=['background_check_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def get_continuous_check(continuous_check_id: float):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/continuous-checks/{continuous_check_id}',
    description=""" Updates a continuous check """,
    tags=['background_check_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def update_continuous_check(continuous_check_id: float, request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/continuous-checks/{continuous_check_id}/history',
    description=""" Lists background check logs. It can be paginated
 """,
    tags=['background_check_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def get_v1_continuous_checks__continuous_check_id_history(
    continuous_check_id: Union[str, str, str, str],
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/hooks',
    description=""" Lists all the configured hooks in your account. """,
    tags=['hook_subscription_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def list_hook():
    """
    Lists all hooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/hooks',
    description=""" Creates a hook subscription to notify events in Truora plataform. Subscriptions broadcast data as events occur and additional subscription instances are not required in order to refresh the information. Events are received in an array as a JWT and are decoded using the signing key returned by this endpoint. Their structure is as follows:

```
{
    "events": [
        {
            "event_action": "created",
            "event_type": "check",
            "id": "HKEdd28c569cf5eb74e45f0f4c092096e62c1c95ba2",
            "object": {
                "check_id": "CHK9c39003424c521aec8566ce59e1ddc86",
                "country": "CO",
                "creation_date": "2020-04-01T23:00:30.581232281Z",
                "homonym_score": 0,
                "id_score": 0,
                "national_id": "1151959906",
                "previous_check": "CHK4ec814fecd147eaae41027081d7d5caf",
                "score": -1,
                "status": "not_started",
                "type": "person",
                "update_date": "2020-04-01T23:00:30.680937413Z"
            },
            "timestamp": "2020-04-01T23:00:30Z",
            "version": "1.0"
        }
    ],
    "iat": 1585782031,
    "iss": "Truora"
}
```

Keep in mind that the object attribute varies depending on the event_type. """,
    tags=['hook_subscription_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def create_hook(request: Request):
    """
    Creates a hook subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/hooks/{hook_id}',
    description=""" Deletes hook configuration. """,
    tags=['hook_subscription_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def delet_hook(hook_id: Union[str, str, str, str]):
    """
    Deletes hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/hooks/{hook_id}',
    description=""" Updates a hook configuration. """,
    tags=['hook_subscription_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def update_hook(hook_id: Union[str, str, str, str], request: Request = ...):
    """
    Updates hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/reports',
    description=""" Lists all reports asociated with the client or user requesting. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def list_reports(start_key: Optional[str] = None, username: Optional[str] = None):
    """
    List Reports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/reports',
    description=""" Creates a Report to which it is possible to associate multiple Checks. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def create_report(request: Request):
    """
    Create Report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/reports/{report_id}',
    description=""" Returns a report with the given ID. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def get_report(report_id: str):
    """
    Get Report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/reports/{report_id}/upload',
    description=""" Upload multiple checks and associate them to the report. The inputs for these checks must be sent in an xlsx file, please use the following templates:

**Person:** [Chile](https://app.truora.com/files/person/person-input-cl.xlsx), [Colombia](https://app.truora.com/files/person/person-input-co.xlsx), [Mexico](https://app.truora.com/files/person/person-input-mx.xlsx), [Peru](https://app.truora.com/files/person/person-input-pe.xlsx), [Costa Rica](https://app.truora.com/files/person/person-input-cr.xlsx), [Brazil](https://app.truora.com/files/person/person-input-br.xlsx)

**Vehicle:** [Chile](https://app.truora.com/files/vehicle/vehicle-input-cl.xlsx), [Colombia](https://app.truora.com/files/vehicle/vehicle-input-co.xlsx), [Mexico](https://app.truora.com/files/vehicle/vehicle-input-mx.xlsx), [Peru](https://app.truora.com/files/vehicle/vehicle-input-pe.xlsx)

**Company** [Colombia](https://app.truora.com/files/company/company-input-co.xlsx), [Mexico](https://app.truora.com/files/company/company-input-mx.xlsx), [Brazil](https://app.truora.com/files/company/company-input-br.xlsx)

Keep in mind that we currently do not support batch uploads for custom check types. Background checks created by batch upload are processed with low priority. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="Truora-API-Key"),
    ],
)
def batch_upload(report_id: str, file: UploadFile = ...):
    """
    Batch Upload
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
